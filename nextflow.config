/**************************** Basic parameters ****************************/
process.executor = "pbspro"
process.queue = "workq"

singularity.runOptions = " --bind /hpcnfs/ --bind /hpcscratch "


params {

    // input output
    input                      = null
    outdir                     = 'results'
    index                      = '/hpcnfs/scratch/DIMA/zhan/frascolla/decontamination_index/idx'

    // Boilerplate options
    publish_dir_mode           = "copy"
    email                      = null
    email_on_fail              = null
    plaintext_email            = false
    monochrome_logs            = false
    hook_url                   = null
    help                       = false
    version                    = false
    validate_params            = true
    show_hidden_params         = false
    schema_ignore_params       = null

}


/**************************** Profiles ****************************/
profiles {
    debug { process.beforeScript = "echo $HOSTNAME" }
    docker {
        docker.enabled         = true
        docker.userEmulation   = { params.use_gatk_spark ? false : true }.call()
        charliecloud.enabled   = false
        podman.enabled         = false
        shifter.enabled        = false
        singularity.enabled    = false
        
    }
    singularity {
        singularity.autoMounts = true
        singularity.enabled    = true
        charliecloud.enabled   = false
        docker.enabled         = false
        podman.enabled         = false
        shifter.enabled        = false
    }
}


/**************************** Manifest ****************************************************/

manifest {
    name            = "Decontamination"
    author          = """Yinxiu Zhan"""
    homePage        = "https://github.com/zhanyinx/variantalker"
    description     = """Variant annotation pipeline."""
    mainScript      = "main.nf"
    nextflowVersion = "!>=22.10.1"
    version         = "1.0.0"
}


/**************************** Tower ****************************************************/
tower {
    enabled = false
}


// Function to ensure that resource requirements don"t go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == "memory") {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "time") {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == "cpus") {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
